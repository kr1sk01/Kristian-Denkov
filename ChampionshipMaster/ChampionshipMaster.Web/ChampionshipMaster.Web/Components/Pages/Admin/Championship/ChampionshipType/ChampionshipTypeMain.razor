@using Microsoft.EntityFrameworkCore
@using System.Text.Json

@page "/ChampionshipTypesMain"

@inject NavigationManager NavigationManager
@inject ITokenService tokenService
@inject IHttpClientFactory httpClient
@inject INotifier notifier
@inject IConfiguration configuration

@inject NotificationService NotificationService
@rendermode InteractiveServer

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

@if (isAdmin)
{
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
        <RadzenButton Style="background-color:darkslategray"
                      ButtonStyle="ButtonStyle.Success"
                      Icon="add_circle_outline"
                      Text="Add New championship type"
                      Click="@InsertRow"
                      Disabled="@(championshiptypesToInsert.Count() > 0)" />
    </RadzenStack>

    <RadzenDataGrid @ref="championshipTypeGrid"
                    AllowAlternatingRows="false"
                    AllowFiltering="false"
                    AllowPaging="true"
                    AllowSorting="true"
                    EditMode="@DataGridEditMode.Single"
                    PageSize="7"
                    Data="@championshipTypeList"
                    TItem="ChampionshipType"
                    RowUpdate="@OnUpdateRow"
                    RowCreate="@OnCreateRow"
                    Sort="@Reset"
                    Page="@Reset"
                    Filter="@Reset"
                    ColumnWidth="20200202px">
        <Columns>

            <RadzenDataGridColumn TItem="ChampionshipType" Property="Name" Title="Name">
                <EditTemplate Context="championshipType">
                    <RadzenTextBox @bind-Value="championshipType.Name" Style="width:200px; display: block" Name="Name" />
                    <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn Width="1%" TItem="ChampionshipType" Context="championshipType" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                <Template Context="championshipType">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(championshipType))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(championshipType))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="championshipType">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(championshipType))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(championshipType))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(championshipType))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>

}

@code {
    private bool dataLoaded = false;

    RadzenDataGrid<ChampionshipType> championshipTypeGrid = default!;

    List<ChampionshipType> championshipTypeList = default!;

    List<ChampionshipType> championshiptypesToInsert = new List<ChampionshipType>();
    List<ChampionshipType> championshiptypesToUpdate = new List<ChampionshipType>();

    ChampionshipType Original { get; set; } = new ChampionshipType();

    void Reset()
    {
        championshiptypesToInsert.Clear();
        championshiptypesToUpdate.Clear();
    }

    void Reset(ChampionshipType championshipType)
    {
        championshiptypesToInsert.Remove(championshipType);
        championshiptypesToUpdate.Remove(championshipType);
    }

    async Task EditRow(ChampionshipType championshipType)
    {

        if (championshiptypesToInsert.Count() > 0)
        {
            Reset();
        }

        Original = new ChampionshipType { Id = championshipType.Id, Name = championshipType.Name };

        championshiptypesToUpdate.Add(championshipType);

        await championshipTypeGrid.EditRow(championshipType);
    }

    async Task OnUpdateRow(ChampionshipType championshipType)
    {
        Reset(championshipType);

        using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        var result = await client.PutAsJsonAsync($"/api/ChampionshipTypes/{championshipType.Id}", championshipType);

    }

    async Task SaveRow(ChampionshipType championshipType)
    {
        if (championshipTypeList.Any(x => x.Name!.ToLower() == championshipType.Name!.ToLower()
            && x.Id != championshipType.Id))
        {
            notifier.SendErrorNotification("There is already a championship type with that name", 4);
            return;
        }

        using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        var response = await client.PostAsJsonAsync("/api/ChampionshipTypes", championshipType);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var championshipTypeResponse = JsonSerializer.Deserialize<Dictionary<string, object>>(content);
            int id = int.Parse(championshipTypeResponse!["id"].ToString()!);

            championshipType.Id = id;

            championshipTypeList.Add(championshipType);
        }

        await championshipTypeGrid.UpdateRow(championshipType);
    }

    async Task CancelEdit(ChampionshipType championshipType)
    {
        Reset(championshipType);

        championshipType.Name = Original.Name;

        championshipTypeGrid.CancelEditRow(championshipType);

        await championshipTypeGrid.Reload();
    }

    async Task DeleteRow(ChampionshipType championshipType)
    {
        Reset(championshipType);

        if (championshipTypeList!.Contains(championshipType))
        {
            championshipTypeList.Remove(championshipType);

            using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
            await client.DeleteAsync($"/api/ChampionshipTypes/{championshipType.Id}");

            await championshipTypeGrid.Reload();

        }
        else
        {
            championshipTypeGrid.CancelEditRow(championshipType);
            await championshipTypeGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        Reset();
        // ??????????????????????????????????????????????????? check input data ?????????????????
        var championshipType = new ChampionshipType();

        championshiptypesToInsert.Add(championshipType);

        await championshipTypeGrid.InsertRow(championshipType);


    }

    void OnCreateRow(ChampionshipType championshipType)
    {
        championshiptypesToInsert.Remove(championshipType);
    }

    bool isAdmin = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await tokenService.ValidateToken(true))
            {
                isAdmin = true;
                var token = await tokenService.GetToken();
                using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
                client.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");
                championshipTypeList = await client.GetFromJsonAsync<List<ChampionshipType>>("/api/ChampionshipTypes") ?? new List<ChampionshipType>();
                StateHasChanged();
            }
            else
            {
                notifier.SendErrorNotification("Access denied!");
                notifier.SendWarningNotification("If you believe there is an error, please contact administrator!", 10);
                NavigationManager.NavigateTo("/");

            }
        }
    }

}
