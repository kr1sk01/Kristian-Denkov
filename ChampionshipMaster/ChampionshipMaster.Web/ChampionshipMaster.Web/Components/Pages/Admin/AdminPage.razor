@using Microsoft.EntityFrameworkCore

@page "/admin"

@inject HttpClient httpClient

@rendermode InteractiveServer

<style>
    .rz-grid-table {
        width: unset;
    }
</style>


<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
    <RadzenButton Style="background-color:darkslategray"
                    ButtonStyle="ButtonStyle.Success"
                    Icon="add_circle_outline"
                    Text="Add New Game Status"
                    Click="@InsertRow"
                    Disabled="@(editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)" />
</RadzenStack>

<RadzenDataGrid @ref="ordersGrid"
                AllowAlternatingRows="false"
                AllowFiltering="false"
                AllowPaging="true"
                AllowSorting="true"
                EditMode="@editMode"
                PageSize="5"
                Data="@orders"
                TItem="GameStatus"
                RowUpdate="@OnUpdateRow"
                RowCreate="@OnCreateRow"
                Sort="@Reset"
                Page="@Reset"
                Filter="@Reset"
                ColumnWidth="20200202px">
    <Columns>

        <RadzenDataGridColumn TItem="GameStatus" Property="Name" Title="Name">
            <EditTemplate Context="order">
                <RadzenTextBox @bind-Value="order.Name" Style="width:200px; display: block" Name="Name" />
                <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />                
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="1%" TItem="GameStatus" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="order">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(order))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(order))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="order">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(order))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(order))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(order))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@inject NotificationService NotificationService

<RadzenButton Text="Show notification with custom position" Style="margin-bottom: 20px;"
              Click=@(args => 
              ShowNotification(
                  new NotificationMessage 
                  { 
                      Style = "position: absolute; left: -1000px;", 
                      Severity = NotificationSeverity.Success, 
                      Summary = "Success Summary", 
                      Detail = "Success Detail", 
                      Duration = 40000 
                  }
              )) />

@code {
    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);

       
    }
}
@code {
    //Grid
    private bool dataLoaded = false;

    RadzenDataGrid<GameStatus>? ordersGrid;

    static List<GameStatus>? gameStatusObjs;


    List<GameStatus>? orders = gameStatusObjs;

    DataGridEditMode editMode = DataGridEditMode.Single;

    List<GameStatus> ordersToInsert = new List<GameStatus>();
    List<GameStatus> ordersToUpdate = new List<GameStatus>();



    void Reset()
    {
        ordersToInsert.Clear();
        ordersToUpdate.Clear();
    }

    void Reset(GameStatus order)
    {
        ordersToInsert.Remove(order);
        ordersToUpdate.Remove(order);
    }

    protected override async Task OnInitializedAsync()
    {       
        await base.OnInitializedAsync();

        gameStatusObjs = await httpClient.GetFromJsonAsync<List<GameStatus>>("/api/GameStatus");
    }

    async Task EditRow(GameStatus order)
    {

        if (editMode == DataGridEditMode.Single && ordersToInsert.Count() > 0)
        {
            Reset();
        }

        ordersToUpdate.Add(order);
        await ordersGrid.EditRow(order);
    }

    async Task OnUpdateRow(GameStatus order)
    {
        Reset(order);

        var result = await httpClient.PutAsJsonAsync($"/api/GameStatus/{order.Id}", order);

    }

    async Task SaveRow(GameStatus order)
    {
        await ordersGrid.UpdateRow(order);
        await httpClient.PostAsJsonAsync("/api/GameStatus", order);
    }

    void CancelEdit(GameStatus order)
    {
        Reset(order);

        ordersGrid.CancelEditRow(order);

        //var orderEntry = dbContext.Entry(order);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

    async Task DeleteRow(GameStatus order)
    {
        Reset(order);

        if (orders.Contains(order))
        {
            orders.Remove(order);

            await httpClient.DeleteAsync($"/api/GameStatus/{order.Id}");

            await ordersGrid.Reload();

        }
        else
        {
            ordersGrid.CancelEditRow(order);
            await ordersGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        if (editMode == DataGridEditMode.Single)
        {
            Reset();
        }
        // ??????????????????????????????????????????????????? check input data ?????????????????
        var order = new GameStatus();

        ordersToInsert.Add(order);

        await ordersGrid.InsertRow(order);
        

    }

    void OnCreateRow(GameStatus order)
    {        
        ordersToInsert.Remove(order);
    }
   
}
