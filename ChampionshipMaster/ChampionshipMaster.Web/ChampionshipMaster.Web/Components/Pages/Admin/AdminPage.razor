@using Microsoft.EntityFrameworkCore
@using System.Text.Json

@page "/admin"

@inject HttpClient httpClient
@inject NotificationService NotificationService

@rendermode InteractiveServer

<style>
    .rz-grid-table {
        width: unset;
    }
</style>


<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
    <RadzenButton Style="background-color:darkslategray"
                  ButtonStyle="ButtonStyle.Success"
                  Icon="add_circle_outline"
                  Text="Add New Game Status"
                  Click="@InsertRow"
                  Disabled="@(gameStatusesToInsert.Count() > 0)" />
</RadzenStack>

<RadzenDataGrid @ref="gameStatusGrid"
                AllowAlternatingRows="false"
                AllowFiltering="false"
                AllowPaging="true"
                AllowSorting="true"
                EditMode="@DataGridEditMode.Single"
                PageSize="5"
                Data="@gameStatusList"
                TItem="GameStatus"
                RowUpdate="@OnUpdateRow"
                RowCreate="@OnCreateRow"
                Sort="@Reset"
                Page="@Reset"
                Filter="@Reset"
                ColumnWidth="20200202px">
    <Columns>

        <RadzenDataGridColumn TItem="GameStatus" Property="Name" Title="Name">
            <EditTemplate Context="gameStatus">
                <RadzenTextBox @bind-Value="gameStatus.Name" Style="width:200px; display: block" Name="Name" />
                <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="1%" TItem="GameStatus" Context="gameStatus" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="gameStatus">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(gameStatus))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(gameStatus))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="gameStatus">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(gameStatus))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(gameStatus))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(gameStatus))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {
    private bool dataLoaded = false;

    RadzenDataGrid<GameStatus> gameStatusGrid = default!;

    List<GameStatus> gameStatusList = default!;

    List<GameStatus> gameStatusesToInsert = new List<GameStatus>();
    List<GameStatus> gameStatusesToUpdate = new List<GameStatus>();

    void Reset()
    {
        gameStatusesToInsert.Clear();
        gameStatusesToUpdate.Clear();
    }

    void Reset(GameStatus gameStatus)
    {
        gameStatusesToInsert.Remove(gameStatus);
        gameStatusesToUpdate.Remove(gameStatus);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        gameStatusList = await httpClient.GetFromJsonAsync<List<GameStatus>>("/api/GameStatus") ?? new List<GameStatus>();
    }

    async Task EditRow(GameStatus gameStatus)
    {

        if (gameStatusesToInsert.Count() > 0)
        {
            Reset();
        }

        gameStatusesToUpdate.Add(gameStatus);
        await gameStatusGrid.EditRow(gameStatus);
    }

    async Task OnUpdateRow(GameStatus gameStatus)
    {
        Reset(gameStatus);

        var result = await httpClient.PutAsJsonAsync($"/api/GameStatus/{gameStatus.Id}", gameStatus);

    }

    async Task SaveRow(GameStatus gameStatus)
    {
        if (gameStatusList.Any(x => x.Name!.ToLower() == gameStatus.Name!.ToLower()))
        {
            var message = new NotificationMessage
                {
                    Summary = "Duplicate name",
                    Detail = "Error Detail",
                    Duration = 4000
                };

            NotificationService.Notify(message);

            return;
        }

        var response = await httpClient.PostAsJsonAsync("/api/GameStatus", gameStatus);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var gameStatusResponse = JsonSerializer.Deserialize<Dictionary<string, object>>(content);
            int id = int.Parse(gameStatusResponse!["id"].ToString()!);

            gameStatus.Id = id;

            gameStatusList.Add(gameStatus);
        }

        await gameStatusGrid.UpdateRow(gameStatus);
    }

    void CancelEdit(GameStatus gameStatus)
    {
        Reset(gameStatus);

        gameStatusGrid.CancelEditRow(gameStatus);
        
        //var orderEntry = dbContext.Entry(gameStatus);
        // if (orderEntry.State == EntityState.Modified)
        // {
        //     orderEntry.CurrentValues.SetValues(orderEntry.OriginalValues);
        //     orderEntry.State = EntityState.Unchanged;
        // }
    }

    async Task DeleteRow(GameStatus gameStatus)
    {
        Reset(gameStatus);

        if (gameStatusList!.Contains(gameStatus))
        {
            gameStatusList.Remove(gameStatus);

            await httpClient.DeleteAsync($"/api/GameStatus/{gameStatus.Id}");

            await gameStatusGrid.Reload();

        }
        else
        {
            gameStatusGrid.CancelEditRow(gameStatus);
            await gameStatusGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        Reset();
        // ??????????????????????????????????????????????????? check input data ?????????????????
        var gameStatus = new GameStatus();

        gameStatusesToInsert.Add(gameStatus);

        await gameStatusGrid.InsertRow(gameStatus);


    }

    void OnCreateRow(GameStatus gameStatus)
    {
        gameStatusesToInsert.Remove(gameStatus);
    }

}
