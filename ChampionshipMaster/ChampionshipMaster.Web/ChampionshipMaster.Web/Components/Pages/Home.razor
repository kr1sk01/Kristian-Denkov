@page "/"
@page "/home"
@inherits LayoutComponentBase

@*implements IAsyncDisposable*@
@inject NavigationManager NavigationManager
@inject ITokenService tokenService
@inject IHttpClientFactory httpClient
@inject ProtectedLocalStorage _localStorage


@rendermode InteractiveServer

<PageTitle>Home</PageTitle>


<h1>Welcome to championship master project, <span style="color:aliceblue">@username</span>!</h1>
<RadzenCard class="p-0">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" Wrap="FlexWrap.NoWrap" Style="height: 500px">
        <RadzenImage class="p-1 rz-color-on-warning rz-text-align-center" Path="Images/foosball.png" AlternateText="community" />
        <RadzenImage class="p-1 rz-color-on-warning rz-text-align-center" Path="Images/foosball.png" AlternateText="community" />
    </RadzenStack>
</RadzenCard>




@* <ul>
    @foreach (var item in _messages)
    {
        <li>@item</li>
    }

</ul> *@


@code {

    private string username = "";

    private HubConnection? _hubConnection;

    private readonly List<string> _messages = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await tokenService.ValidateToken())
            {
                var tokenString = await tokenService.GetToken();
                if (tokenString == null)
                {
                    NavigationManager.NavigateTo("/login");
                }
                var token = new JwtSecurityTokenHandler().ReadJwtToken(tokenString);

                username = token.Claims.FirstOrDefault(x => x.Type == "unique_name")?.Value ?? "";

                StateHasChanged();
            }
            else { NavigationManager.NavigateTo("/login"); }
        }
    }

    //     _hubConnection = new HubConnectionBuilder()
    //         .WithUrl("https://localhost:50397/notifications")
    //         .Build();

    //     _hubConnection.On<string>("ReceiveNotification", message =>
    //     {
    //         _messages.Add(message);

    //         InvokeAsync(StateHasChanged);
    //     });

    //     await _hubConnection.StartAsync();


    // public async ValueTask DisposeAsync(){
    //     if(_hubConnection !=null)
    //     {
    //         await _hubConnection.DisposeAsync();
    //     }
    // }

}