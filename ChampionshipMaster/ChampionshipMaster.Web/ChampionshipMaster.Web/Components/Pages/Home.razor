@page "/"
@implements IAsyncDisposable

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>


<h1>Wellcome to championship master project!</h1>
<RadzenCard class="p-0">
    <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Normal" Wrap="FlexWrap.NoWrap" Style="height: 600px">
        <RadzenImage class="p-1 rz-color-on-warning rz-text-align-center" Path="Images/foosball.png" AlternateText="community" />
        <RadzenImage class="p-1 rz-color-on-warning rz-text-align-center" Path="Images/foosball.png" AlternateText="community" />
        <RadzenImage class="p-1 rz-color-on-warning rz-text-align-center" Path="Images/foosball.png" AlternateText="community" />
    </RadzenStack>
</RadzenCard>


Welcome to your new app.

Messages from the server: 
<ul>
    @foreach (var item in _messages)
    {
        <li>@item</li>
    }

</ul>
@code{
}
@code{
    private HubConnection? _hubConnection;

    private readonly List<string> _messages = new();

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:50397/notifications")
            .Build();

        _hubConnection.On<string>("ReceiveNotification", message =>
        {
            _messages.Add(message);

            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync(){
        if(_hubConnection !=null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}