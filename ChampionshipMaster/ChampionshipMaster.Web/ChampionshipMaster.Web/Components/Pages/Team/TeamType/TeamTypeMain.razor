@using Microsoft.EntityFrameworkCore
@using System.Text.Json

@page "/TeamTypeMain"

@inject HttpClient httpClient
@inject NotificationService NotificationService

@rendermode InteractiveServer

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
    <RadzenButton Style="background-color:darkslategray"
                  ButtonStyle="ButtonStyle.Success"
                  Icon="add_circle_outline"
                  Text="Add New Game Status"
                  Click="@InsertRow"
                  Disabled="@(TeamTypeesToInsert.Count() > 0)" />
</RadzenStack>

<RadzenDataGrid @ref="TeamTypeGrid"
                AllowAlternatingRows="false"
                AllowFiltering="false"
                AllowPaging="true"
                AllowSorting="true"
                EditMode="@DataGridEditMode.Single"
                PageSize="5"
                Data="@TeamTypeList"
                TItem="TeamType"
                RowUpdate="@OnUpdateRow"
                RowCreate="@OnCreateRow"
                Sort="@Reset"
                Page="@Reset"
                Filter="@Reset"
                ColumnWidth="20200202px">
    <Columns>

        <RadzenDataGridColumn TItem="TeamType" Property="Name" Title="Name">
            <EditTemplate Context="TeamType">
                <RadzenTextBox @bind-Value="TeamType.Name" Style="width:200px; display: block" Name="Name" />
                <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="1%" TItem="TeamType" Context="TeamType" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="TeamType">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(TeamType))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(TeamType))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="TeamType">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(TeamType))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(TeamType))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(TeamType))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {
    private bool dataLoaded = false;

    RadzenDataGrid<TeamType> TeamTypeGrid = default!;

    List<TeamType> TeamTypeList = default!;

    List<TeamType> TeamTypeesToInsert = new List<TeamType>();
    List<TeamType> TeamTypeesToUpdate = new List<TeamType>();

    TeamType Original { get; set; } = new TeamType();

    void Reset()
    {
        TeamTypeesToInsert.Clear();
        TeamTypeesToUpdate.Clear();
    }

    void Reset(TeamType TeamType)
    {
        TeamTypeesToInsert.Remove(TeamType);
        TeamTypeesToUpdate.Remove(TeamType);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        TeamTypeList = await httpClient.GetFromJsonAsync<List<TeamType>>("/api/TeamTypes") ?? new List<TeamType>();
    }

    async Task EditRow(TeamType TeamType)
    {

        if (TeamTypeesToInsert.Count() > 0)
        {
            Reset();
        }

        Original = new TeamType { Id = TeamType.Id, Name = TeamType.Name };

        TeamTypeesToUpdate.Add(TeamType);

        await TeamTypeGrid.EditRow(TeamType);
    }

    async Task OnUpdateRow(TeamType TeamType)
    {
        Reset(TeamType);

        var result = await httpClient.PutAsJsonAsync($"/api/TeamTypes/{TeamType.Id}", TeamType);

    }

    async Task SaveRow(TeamType TeamType)
    {
        if (TeamTypeList.Any(x => x.Name!.ToLower() == TeamType.Name!.ToLower()
            && x.Id != TeamType.Id))
        {
            var message = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Duplicate name",
                    Detail = "There is already a game status with that name",
                    Duration = 4000,
                    CloseOnClick = true
                };

            NotificationService.Notify(message);

            return;
        }

        var response = await httpClient.PostAsJsonAsync("/api/TeamTypes", TeamType);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var TeamTypeResponse = JsonSerializer.Deserialize<Dictionary<string, object>>(content);
            int id = int.Parse(TeamTypeResponse!["id"].ToString()!);

            TeamType.Id = id;

            TeamTypeList.Add(TeamType);
        }

        await TeamTypeGrid.UpdateRow(TeamType);
    }

    async Task CancelEdit(TeamType TeamType)
    {
        Reset(TeamType);

        TeamType.Name = Original.Name;

        TeamTypeGrid.CancelEditRow(TeamType);

        await TeamTypeGrid.Reload();
    }

    async Task DeleteRow(TeamType TeamType)
    {
        Reset(TeamType);

        if (TeamTypeList!.Contains(TeamType))
        {
            TeamTypeList.Remove(TeamType);

            await httpClient.DeleteAsync($"/api/TeamTypes/{TeamType.Id}");

            await TeamTypeGrid.Reload();

        }
        else
        {
            TeamTypeGrid.CancelEditRow(TeamType);
            await TeamTypeGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        Reset();
        // ??????????????????????????????????????????????????? check input data ?????????????????
        var TeamType = new TeamType();

        TeamTypeesToInsert.Add(TeamType);

        await TeamTypeGrid.InsertRow(TeamType);


    }

    void OnCreateRow(TeamType TeamType)
    {
        TeamTypeesToInsert.Remove(TeamType);
    }

}
