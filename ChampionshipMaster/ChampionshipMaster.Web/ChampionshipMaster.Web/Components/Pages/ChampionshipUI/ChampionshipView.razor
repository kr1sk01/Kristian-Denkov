@page "/championshipsmain"
@using System.Net.Http
@inject IHttpClientFactory httpClient
@inject NavigationManager nManager
@inject IConfiguration configuration
@using Microsoft.EntityFrameworkCore
@using System.Linq

@rendermode InteractiveServer

<PageTitle>Championships</PageTitle>


@inject DialogService DialogService

<RadzenDataGrid @ref="championshipList"
                AllowFiltering="true"
                FilterPopupRenderMode="PopupRenderMode.OnDemand"
                AllowPaging="true"
                PageSize="5"
                AllowSorting="true"
                Data="@championships"
                TItem="ChampionshipDto">
    <Columns>
        <RadzenDataGridColumn TItem="ChampionshipDto" Property="Name" Title="Name">
            <Template Context="championship">
                @championship.Name
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ChampionshipDto" Property="GameTypeName" Title="Game Type Name">
            <Template Context="championship">
                @championship.GameTypeName
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ChampionshipDto" Property="Date" Title="Date">
            <Template Context="championship">
                @championship.Date
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ChampionshipDto" Property="Winner" Title="Championship Winner">
            <Template Context="championship">
                @championship.WinnerName              
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ChampionshipDto" Property="ChampionshipStatusName" Title="Status">
            <Template Context="championship">
                @switch (championship.ChampionshipStatusName)
                {
                    case "Finished":
                        StatusColor = "blue";
                        break;
                    case "Coming":
                        StatusColor = "red";
                        break;
                    case "Live":
                        StatusColor = "green";
                        break;
                    case "Cancelled":
                        StatusColor = "darkgray";
                        break;
                    default:
                        break;
                }
                <span style="color:@StatusColor">@championship.ChampionshipStatusName</span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ChampionshipDto" Property="ChampionshipTypeName" Title="Championship Type">
            <Template Context="championship">
                @championship.ChampionshipTypeName
            </Template>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>


@if (championships != null)
{
    <table class="table">
        <thead>
            <tr>
                <td>id</td>
                <th>Name</th>
                <th>Game Type</th>
                <th>Date</th>
                <th>Winner</th>
                <th>Champ Status</th>
                <th>Champ Type</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in championships)
            {
                <tr class="table-row">
                    <td>@item.Id</td>
                    <td>@item.Name</td>
                    <td>@item.GameTypeName</td>
                    <td>@item.Date</td>
                    <td>@item.WinnerName</td>

                    @switch (item.ChampionshipStatusName)
                    {
                        case "Finished":
                            StatusColor = "blue";
                            break;
                        case "Coming":
                            StatusColor = "red";
                            break;
                        case "Live":
                            StatusColor = "green";
                            break;
                        case "Cancelled":
                            StatusColor = "darkgray";
                            break;
                        default:
                            break;
                    }
                    <td style="color:@StatusColor">@item.ChampionshipStatusName</td>
                    <td>@item.ChampionshipTypeName</td>
                    <td><button class="btn-primary" @onclick="() => Details(item.Id)">Details</button></td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>There are no championships...</p>
}



@code {
    RadzenDataGrid<ChampionshipDto> championshipList;

    string StatusColor = "white";

    private void Sort()
    {
        if (championships != null)
        {
            championships = championships.OrderBy(x => x.Name).ToList();
            StateHasChanged();
        }
    }
    private List<ChampionshipDto>? championships;

    protected override async Task OnInitializedAsync()
    {
        using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        var test = await client.GetFromJsonAsync<List<ChampionshipDto>>("api/championship/details");
        if (test != null)
            championships = test;
    }

    private void Details(int id)
    {
        nManager.NavigateTo($"/championshipDetails?id={Uri.EscapeDataString(id.ToString())}");
    }
}
