@using Microsoft.EntityFrameworkCore
@using System.Text.Json

@page "/gametypemain"

@inject IHttpClientFactory httpClient
@inject INotifier notifier
@inject IConfiguration configuration

@rendermode InteractiveServer

<style>
    .rz-grid-table {
        width: unset;
    }
</style>

<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="10px" class="mt-2 mb-4">
    <RadzenButton Style="background-color:darkslategray"
                  ButtonStyle="ButtonStyle.Success"
                  Icon="add_circle_outline"
                  Text="Add New Game Status"
                  Click="@InsertRow"
                  Disabled="@(GameTypeesToInsert.Count() > 0)" />
</RadzenStack>

<RadzenDataGrid @ref="GameTypeGrid"
                AllowAlternatingRows="false"
                AllowFiltering="false"
                AllowPaging="true"
                AllowSorting="true"
                EditMode="@DataGridEditMode.Single"
                PageSize="5"
                Data="@GameTypeList"
                TItem="GameType"
                RowUpdate="@OnUpdateRow"
                RowCreate="@OnCreateRow"
                Sort="@Reset"
                Page="@Reset"
                Filter="@Reset"
                ColumnWidth="20200202px">
    <Columns>

        <RadzenDataGridColumn TItem="GameType" Property="Name" Title="Name">
            <EditTemplate Context="GameType">
                <RadzenTextBox @bind-Value="GameType.Name" Style="width:200px; display: block" Name="Name" />
                <RadzenRequiredValidator Text="Name is required" Component="Name" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn Width="1%" TItem="GameType" Context="GameType" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
            <Template Context="GameType">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditRow(GameType))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(GameType))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="GameType">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveRow(GameType))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelEdit(GameType))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(GameType))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>

    </Columns>
</RadzenDataGrid>

@code {
    private bool dataLoaded = false;

    RadzenDataGrid<GameType> GameTypeGrid = default!;

    List<GameType> GameTypeList = default!;

    List<GameType> GameTypeesToInsert = new List<GameType>();
    List<GameType> GameTypeesToUpdate = new List<GameType>();

    GameType Original { get; set; } = new GameType();

    void Reset()
    {
        GameTypeesToInsert.Clear();
        GameTypeesToUpdate.Clear();
    }

    void Reset(GameType GameType)
    {
        GameTypeesToInsert.Remove(GameType);
        GameTypeesToUpdate.Remove(GameType);
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        GameTypeList = await client.GetFromJsonAsync<List<GameType>>("/api/GameTypes") ?? new List<GameType>();
    }

    async Task EditRow(GameType GameType)
    {

        if (GameTypeesToInsert.Count() > 0)
        {
            Reset();
        }

        Original = new GameType { Id = GameType.Id, Name = GameType.Name };

        GameTypeesToUpdate.Add(GameType);

        await GameTypeGrid.EditRow(GameType);
    }

    async Task OnUpdateRow(GameType GameType)
    {
        Reset(GameType);

        using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        var result = await client.PutAsJsonAsync($"/api/GameTypes/{GameType.Id}", GameType);

    }

    async Task SaveRow(GameType GameType)
    {
        if (GameTypeList.Any(x => x.Name!.ToLower() == GameType.Name!.ToLower()
            && x.Id != GameType.Id))
        {
            var message = new NotificationMessage
                {
                    Severity = NotificationSeverity.Error,
                    Summary = "Duplicate name",
                    Detail = "There is already a game status with that name",
                    Duration = 4000,
                    CloseOnClick = true
                };

            notifier.SendSuccessNotification("Changes made successfully!");

            return;
        }

        using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        var response = await client.PostAsJsonAsync("/api/GameTypes", GameType);

        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var GameTypeResponse = JsonSerializer.Deserialize<Dictionary<string, object>>(content);
            int id = int.Parse(GameTypeResponse!["id"].ToString()!);

            GameType.Id = id;

            GameTypeList.Add(GameType);
        }

        await GameTypeGrid.UpdateRow(GameType);
    }

    async Task CancelEdit(GameType GameType)
    {
        Reset(GameType);

        GameType.Name = Original.Name;

        GameTypeGrid.CancelEditRow(GameType);

        await GameTypeGrid.Reload();
    }

    async Task DeleteRow(GameType GameType)
    {
        Reset(GameType);

        if (GameTypeList!.Contains(GameType))
        {
            GameTypeList.Remove(GameType);

            using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
            await client.DeleteAsync($"/api/GameTypes/{GameType.Id}");

            await GameTypeGrid.Reload();

        }
        else
        {
            GameTypeGrid.CancelEditRow(GameType);
            await GameTypeGrid.Reload();
        }
    }

    async Task InsertRow()
    {
        Reset();
        // ??????????????????????????????????????????????????? check input data ?????????????????
        var GameType = new GameType();

        GameTypeesToInsert.Add(GameType);

        await GameTypeGrid.InsertRow(GameType);


    }

    void OnCreateRow(GameType GameType)
    {
        GameTypeesToInsert.Remove(GameType);
    }

}
