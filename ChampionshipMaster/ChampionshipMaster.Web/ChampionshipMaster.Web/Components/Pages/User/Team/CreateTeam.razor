@page "/createteam"
@using ChampionshipMaster.Web.Components.Pages.User.Account

@inject NavigationManager nManager
@inject Radzen.DialogService dialogService

@inject IHttpClientFactory httpClient
@inject IConfiguration configuration
@inject ITokenService tokenService
@inject IHttpClientFactory httpClient
@inject IWebHostEnvironment Environment

@inject ProtectedLocalStorage _localStorage
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<center>
    <h3>Create Team</h3>
    <div style="justify-content:center;text-align:left;width:45%;">
        <RadzenTemplateForm TItem="TeamDto" Data=@model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
            <RadzenStack Gap="1rem" Class="rz-p-sm-12">
                <RadzenFormField Text="Name" Variant="@variant">
                    <ChildContent>
                        <RadzenTextBox Name="Name" @bind-Value=@model.Name />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Name" Text="Name is required." />
                        <RadzenLengthValidator Component="Name" Min="3" Max="32" Text="Name can be between 3 and 32 characters" />
                    </Helper>
                </RadzenFormField>

                <RadzenDropDown Placeholder="Select team type" Name="Type" @bind-Value=@model.TeamTypeName Data=@teamTypes.Select(x => x.Name).ToList() Style="width: 100%;" />

                <RadzenButton ButtonType="ButtonType.Submit" Text="Create Team"></RadzenButton>
            </RadzenStack>

        </RadzenTemplateForm>

    </div>
</center>




<div class="rz-p-sm-12 rz-text-align-center">
</div>


@* <EditForm Model="" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="row justify-content-center">
        <h3>Add Game Type</h3>
        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" class="form-control" @bind-Value="gameType.Name" />

        </div>

        <div class="form-group">
            <label for="maxPoints">Max Points:</label>
            <InputNumber id="maxPoints" class="form-control" @bind-Value="gameType.MaxPoints" />

        </div>

        <div class="form-group">
            <label for="teamType">Team Type:</label>
            <select id="teamType" class="form-control" @bind="@gameType.TeamTypeId">
                <option value="">-- Select Team Type --</option>
                @foreach (var teamType in teamTypes)
                {
                    <option value="@teamType.Id">@teamType.Name</option>
                }
            </select>
            <ValidationMessage For="@(() => gameType.TeamTypeId)" />
        </div>
        <br />
        <button type="submit" class="btn btn-primary">Submit</button>
    </div>
</EditForm> *@

@code {
    Variant variant = Variant.Outlined;

    string username = "";
    string id = "";


    TeamDto model = new TeamDto();



    //private GameType gameType = new GameType();
    private List<TeamType> teamTypes = new List<TeamType>(); // Assuming you have a list of TeamTypes to choose from

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
            var test = await client.GetFromJsonAsync<List<TeamType>>("api/TeamTypes");
            teamTypes = test;
            StateHasChanged();
        }
    }



    private async Task OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        //TeamDto team = new TeamDto { };
    }
    private async Task OnSubmit(TeamDto model)
    {
        if (await tokenService.ValidateToken())
        {
            var token = new JwtSecurityTokenHandler().ReadJwtToken(await tokenService.GetToken());
            username = token.Claims.FirstOrDefault(x => x.Type == "unique_name")?.Value ?? "";
            id = token.Claims.FirstOrDefault(x => x.Type == "nameid")?.Value ?? "";
        }
        model.CreatedBy = username;
        
        using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {await tokenService.GetToken()}");
        await client.PostAsJsonAsync("/api/Teams", model);

       

        //Navigate to My teams page
        //TeamDto team = new TeamDto { };
    }
}
