@page "/profile"


@inject ITokenService tokenService
@inject IHttpClientFactory httpClient
@inject IWebHostEnvironment Environment
@inject IConfiguration configuration

@inject ProtectedLocalStorage _localStorage
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Profile</PageTitle>

<h1>@username 's profile</h1>

<p>
    <label>
        Max file size:
        <input type="number" @bind="maxFileSize" />
    </label>
</p>

<p>
    <label>
        Max allowed files:
        <input type="number" @bind="maxAllowedFiles" />
    </label>
</p>

<p>
    <label>
        Upload up to @maxAllowedFiles of up to @maxFileSize bytes:
        <InputFile OnChange="LoadFiles" />
    </label>
</p>

@if (isLoading)
{
    <p>Uploading...</p>
}
else
{
    <ul>
        @foreach (var file in loadedFiles)
        {
            <li>
                <ul>
                    <li>Name: @file.Name</li>
                    <li>Last modified: @file.LastModified.ToString()</li>
                    <li>Size (bytes): @file.Size</li>
                    <li>Content type: @file.ContentType</li>
                </ul>
            </li>
        }
    </ul>
}

<UploadAvatar></UploadAvatar>

@code {
    private bool loggedIn = false;
    private const string UNIQUE_NAME = "unique_name";
    private string username = "";

    private HubConnection? _hubConnection;

    private readonly List<string> _messages = new();


    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 3;
    private bool isLoading;

    public ProfileDto profileDto=new ProfileDto();

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();
        try
        {
            var file = e.File;
            var test = await UploadMedia(file);
            profileDto.Avatar = new byte[test.Length];
            Array.Copy(test, profileDto.Avatar, test.Length);
        }
        catch(Exception ex)
        {
            //Throw ex
        }
        var tokenString = await tokenService.GetToken();
        if (tokenString != null)
        {
            var token = new JwtSecurityTokenHandler().ReadJwtToken(tokenString);

            if (await tokenService.ValidateToken())
            {              
                profileDto.UserName = token.Claims.FirstOrDefault(x => x.Type == UNIQUE_NAME)?.Value ?? "";
            }

        }
        using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        var test2 = await client.PostAsJsonAsync("/api/Player/ChangePicture", profileDto);
        isLoading = false;
    }
    public static async Task<byte[]> UploadMedia(IBrowserFile file)
    {
        var path = Path.Combine(Path.GetTempPath(), Guid.NewGuid().ToString());

        await using var fs = new FileStream(path, FileMode.Create);

        await file.OpenReadStream(file.Size).CopyToAsync(fs);

        var bytes = new byte[file.Size];

        fs.Position = 0;

        await fs.ReadAsync(bytes);

        fs.Close();

        File.Delete(path);

        return bytes;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            if (await tokenService.ValidateToken())
            {
                loggedIn = true;
                var token = new JwtSecurityTokenHandler().ReadJwtToken(await tokenService.GetToken());
                username = token.Claims.FirstOrDefault(x => x.Type == "unique_name")?.Value ?? "";

                StateHasChanged();
            }
            else { NavigationManager.NavigateTo("/login"); }
        }


    }
}