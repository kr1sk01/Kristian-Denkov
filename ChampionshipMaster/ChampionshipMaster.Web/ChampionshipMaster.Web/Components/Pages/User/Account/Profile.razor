@page "/profile"


@inject ITokenService tokenService
@inject IHttpClientFactory httpClient
@inject IWebHostEnvironment Environment
@inject IConfiguration configuration

@inject ProtectedLocalStorage _localStorage
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Profile</PageTitle>

<div class="mainProfile">
    <center>
        <h1>@(username)'s profile</h1>
        <h2>Email: @email</h2>
        
        <ChangeName @ref=@changeUsername
                    Title="Change Username"
                    RequestUrl="api/Player/changeUsername"
                    ResponseProperty="jwtToken"
                    ToLocalStorage="jwtToken"
                    StateChange=@CheckButtonState />
        
        <ImageUpload @ref=@playerAvatar
                     Title="Avatar"
                     SetImageFor="@ImageUpload.SetImageForOptions.Avatar"
                     RequestUrl="api/Player/changeAvatar/"
                     ToLocalStorage="playerAvatar"
                     StateChange=@CheckButtonState />

        <RadzenButton Text="Save Changes" Disabled="@isValueInitial" Click="OnClick"></RadzenButton>
    </center>
</div>

@code {
    ImageUpload playerAvatar;
    ChangeName changeUsername;
    bool loggedIn = false;
    string username = string.Empty;
    string email = string.Empty;
    string? base64EncodedImageData;
    bool isValueInitial = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!await tokenService.ValidateToken())
            {
                NavigationManager.NavigateTo("/login");
            }

            loggedIn = true;
            var token = new JwtSecurityTokenHandler().ReadJwtToken(await tokenService.GetToken());
            username = token.Claims.FirstOrDefault(x => x.Type == "unique_name")?.Value ?? "";
            changeUsername.SetInitialValue(username);
            email = token.Claims.FirstOrDefault(x => x.Type == "email")?.Value ?? "";

            try
            {
                var imageResult = await _localStorage.GetAsync<string>("playerAvatar");
                if (imageResult.Success && !string.IsNullOrEmpty(imageResult.Value))
                {
                    base64EncodedImageData = imageResult.Value!;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
            finally
            {
                playerAvatar.UpdateDisplayedImagePath(base64EncodedImageData);
            }

            StateHasChanged();
        }
    }

    public async Task OnClick()
    {
        await changeUsername.OnClick();
        await playerAvatar.UploadImage();
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    public async Task CheckButtonState()
    {
        isValueInitial = playerAvatar.isValueInitial && changeUsername.isValueInitial;
    }
}