@inject ITokenService tokenService
@inject IHttpClientFactory httpClient
@inject IWebHostEnvironment Environment
@inject IConfiguration configuration
@inject INotifier notifier

@inject ProtectedLocalStorage _localStorage
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="col-md-6 col-lg-4 p-3">
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenTextBox @ref="@textBox" Value="@currentUsername" @oninput=@(args => OnChange(args.Value?.ToString())) class="w-100" aria-label="TextBox with change on every input" />
            <RadzenButton Disabled="@(!usernameHasChanged)" Click="OnClick">Save</RadzenButton>
        </RadzenStack>
    </RadzenCard>
</div>

@code {
    RadzenTextBox textBox = default!;
    JwtSecurityToken token = new JwtSecurityToken();
    bool loggedIn = false;
    string initialUsername = "";
    string? currentUsername = "";
    bool usernameHasChanged = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await tokenService.ValidateToken())
            {
                loggedIn = true;
                token = new JwtSecurityTokenHandler().ReadJwtToken(await tokenService.GetToken());
                var username = token.Claims.FirstOrDefault(x => x.Type == "unique_name")?.Value ?? "";
                initialUsername = username;
                currentUsername = username;
                StateHasChanged();
            }
            else { NavigationManager.NavigateTo("/login"); }
        }
    }

    public void OnChange(string? value)
    {
        if (!string.IsNullOrEmpty(value) && value != initialUsername)
        {
            usernameHasChanged = true;
            currentUsername = value;
            StateHasChanged();
        }
        else
        {
            usernameHasChanged = false;
            currentUsername = value;
            StateHasChanged();
        }
    }

    public async Task OnClick()
    {
        var token = await tokenService.GetToken();
        if (token == null)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
            client.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");
            var newUsername = textBox.Value;
            Dictionary<string, string> content = new Dictionary<string, string>
                {
                    { "newUsername", newUsername }
                };
            var request = await client.PostAsJsonAsync("api/Player/changeUsername", content);
            var body = await request.Content.ReadAsStringAsync();

            if (request.IsSuccessStatusCode)
            {
                var tokenString = JsonSerializer.Deserialize<Dictionary<string, string>>(body)!["jwtToken"];
                await _localStorage.SetAsync("jwtToken", tokenString);
                NavigationManager.NavigateTo("/profile", forceLoad: true);
            }
            else
            {
                notifier.SendErrorNotification(body, 5);
            }
        }
        
    }
}
