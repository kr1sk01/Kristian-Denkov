@inject ITokenService tokenService
@inject IHttpClientFactory httpClient
@inject IWebHostEnvironment Environment
@inject IConfiguration configuration

@inject ProtectedLocalStorage _localStorage
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="col-md-6 col-lg-4 p-3">
    <RadzenCard>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenTextBox Value="@initialUsername" @oninput=@(args => OnChange(args.Value?.ToString())) class="w-100" aria-label="TextBox with change on every input" />
            <RadzenButton Disabled="@(!usernameHasChanged)" Click="OnClick">Save</RadzenButton>
        </RadzenStack>
    </RadzenCard>
</div>

@code {
    bool loggedIn = false;
    string initialUsername = "";
    bool usernameHasChanged = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await tokenService.ValidateToken())
            {
                loggedIn = true;
                var token = new JwtSecurityTokenHandler().ReadJwtToken(await tokenService.GetToken());
                initialUsername = token.Claims.FirstOrDefault(x => x.Type == "unique_name")?.Value ?? "";
                StateHasChanged();
            }
            else { NavigationManager.NavigateTo("/login"); }
        }
    }

    public void OnChange(string? currentUsername)
    {
        if (!string.IsNullOrEmpty(currentUsername) && currentUsername != initialUsername)
        {
            usernameHasChanged = true;
            StateHasChanged();
        }
        else
        {
            usernameHasChanged = false;
            StateHasChanged();
        }
    }

    public void OnClick()
    {
        
    }
}
