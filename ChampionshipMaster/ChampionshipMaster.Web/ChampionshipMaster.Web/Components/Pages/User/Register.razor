@page "/register"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json

@inject IHttpClientFactory httpClient
@inject NavigationManager NavigationManager
@inject IConfiguration configuration
@inject INotifier notifier
@rendermode InteractiveServer

<center>
    <h3>Register</h3>
    <div style="justify-content:center;text-align:left;width:45%;">
        <RadzenTemplateForm Style="" TItem="RegisterViewModel" Data=@model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
            @if (showError)
            {
                <RadzenAlert Variant="@Variant.Filled" AlertStyle=@AlertStyle.Primary Size=@AlertSize.Small Shade="Shade.Lighter" AllowClose=false>
                    <RadzenText TagName="TagName.P">@errorMessage</RadzenText>
                </RadzenAlert>
            }
            <RadzenStack Gap="1rem" Class="rz-p-sm-12">
                <RadzenFormField Text="Email" Variant="@variant">
                    <ChildContent>
                        <RadzenTextBox Name="email" @bind-Value=@model.Email />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="email" Text="Email is required." />
                        <RadzenEmailValidator Component="email" Text="Email is not valid." />
                        <RadzenLengthValidator Component="email" Max="256" Text="Email can be a maximum of 256 characters"/>
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Username" Variant="@variant">
                    <ChildContent>
                        <RadzenTextBox Name="Username" @bind-Value=@model.UserName />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="Username" Text="Username is required." />
                        <RadzenLengthValidator Component="Username" Min="4" Max="50" Text="Username should be between 4 and 50 characters" />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Password" Variant="@variant">
                    <ChildContent>
                        <RadzenTextBox Name="Password" @bind-Value="@model.Password" Visible="@(!password)" />
                        <RadzenPassword Name="Password" @bind-Value="@model.Password" Visible="@password" />
                    </ChildContent>
                    <End>
                        <RadzenButton Icon="@(password ? "visibility" : "visibility_off")" Click="TogglePassword" Variant="Variant.Text" Size="ButtonSize.Small" />
                    </End>
                    <Helper>
                        <RadzenRequiredValidator Component="Password" Text="Password is required." />
                        <RadzenLengthValidator Component="Password" Min="8" Max="100" Text="Password should be between 8 and 100 characters" />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Confirm Password" Variant="@variant">
                    <ChildContent>
                        <RadzenTextBox Name="confirmPassword" @bind-Value=@model.ConfirmPassword Visible="@(!confirmPassword)" />
                        <RadzenPassword Name="confirmPassword" @bind-Value=@model.ConfirmPassword Visible="@confirmPassword" />
                    </ChildContent>
                    <End>
                        <RadzenButton Icon="@(confirmPassword ? "visibility" : "visibility_off")" Click="ToggleConfirmPassword" Variant="Variant.Text" Size="ButtonSize.Small" />
                    </End>
                    <Helper>
                        <RadzenRequiredValidator Component="confirmPassword" Text="Confirm Password is required." />
                        <RadzenCompareValidator Component="confirmPassword" Visible=@(!string.IsNullOrEmpty(model.ConfirmPassword)) Value=@model.Password Text="Passwords should be the same." />
                    </Helper>

                </RadzenFormField>
                <RadzenButton ButtonType="ButtonType.Submit" Text="Register"></RadzenButton>
            </RadzenStack>
        </RadzenTemplateForm>

    </div>
</center>

@code {

    Variant variant = Variant.Outlined;


    private RegisterViewModel model { get; set; } = new RegisterViewModel();
    private string? errorMessage;
    private bool showError = false;

    bool password = true;
    bool confirmPassword = true;

    async Task OnSubmit(RegisterViewModel register)
    {
        using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        var request = await client.PostAsJsonAsync("api/Player/register", register);

        if (!request.IsSuccessStatusCode)
        {
            var responseBody = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(await request.Content.ReadAsStringAsync());
            errorMessage = responseBody!.First()["description"];
            showError = true;
            return;
        }
        notifier.SendSuccessNotification("Registered successfully!");
        notifier.SendInformationalNotification("In order to use the app you need to confirmyour email and sing in!", 10);
        NavigationManager.NavigateTo("/login");
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        showError = false;
    }

    void TogglePassword()
    {
        password = !password;
    }
    void ToggleConfirmPassword()
    {
        confirmPassword = !confirmPassword;
    }
}
