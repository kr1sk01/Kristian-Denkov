@page "/championshipsmain"

@inject IHttpClientFactory httpClient
@inject IConfiguration configuration
@inject ITokenService tokenService

@inject NavigationManager nManager
@inject ProtectedLocalStorage _localStorage
@inject DialogService DialogService
@inject NavigationManager NavigationManager


@rendermode InteractiveServer

<PageTitle>Championships</PageTitle>



<RadzenDataGrid @ref="championshipList"
                AllowFiltering="true"
                FilterPopupRenderMode="PopupRenderMode.OnDemand"
                AllowPaging="true"
                PageSize="8"
                AllowSorting="true"
                Data="@championships"
                TItem="ChampionshipDto">
    <Columns>
        <RadzenDataGridColumn TItem="ChampionshipDto" Property="Name" Title="Name">
            <Template Context="championship">
                @championship.Name
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ChampionshipDto" Property="GameTypeName" Title="Game Type Name">
            <Template Context="championship">
                @championship.GameTypeName
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ChampionshipDto" Property="Date" Title="Date">
            <Template Context="championship">
                @championship.Date
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ChampionshipDto" Property="WinnerName" Title="Championship Winner">
            <Template Context="championship">
                @championship.WinnerName              
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ChampionshipDto" Property="ChampionshipStatusName" Title="Status">
            <Template Context="championship">
                @switch (championship.ChampionshipStatusName)
                {
                    case "Finished":
                        StatusColor = "blue";
                        break;
                    case "Coming":
                        StatusColor = "red";
                        break;
                    case "Live":
                        StatusColor = "green";
                        break;
                    case "Cancelled":
                        StatusColor = "darkgray";
                        break;
                    default:
                        break;
                }
                <span style="color:@StatusColor">@championship.ChampionshipStatusName</span>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ChampionshipDto" Property="ChampionshipTypeName" Title="Championship Type">
            <Template Context="championship">
                @championship.ChampionshipTypeName
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Filterable=false Sortable=false TItem="ChampionshipDto" Title="Details">
            <Template Context="championship">
                <RadzenButton ButtonStyle="ButtonStyle.Info" Variant="Variant.Flat" Shade="Shade.Lighter" Icon="info" class="m-1" Click="() => OpenChampionship(championship.Id.ToString())" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    RadzenDataGrid<ChampionshipDto>? championshipList;

    string StatusColor = "white";

    private void Sort()
    {
        if (championships != null)
        {
            championships = championships.OrderBy(x => x.Name).ToList();
            StateHasChanged();
        }
    }
    private List<ChampionshipDto>? championships;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (await tokenService.ValidateToken())
            {
                var token = new JwtSecurityTokenHandler().ReadJwtToken(await tokenService.GetToken());

                StateHasChanged();
            }
            else { NavigationManager.NavigateTo("/login"); }

            using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
            var test = await client.GetFromJsonAsync<List<ChampionshipDto>>("api/championship/details");
            if (test != null)
                championships = test;
            StateHasChanged();
        } 
    }

    async Task OpenChampionship(string id)
    {
        await DialogService.OpenAsync<ChampionShipDetails>($"",
              new Dictionary<string, object>() { { "id", id } },
              new DialogOptions() { Width = "75%", Height = "75%" });
    }
}
