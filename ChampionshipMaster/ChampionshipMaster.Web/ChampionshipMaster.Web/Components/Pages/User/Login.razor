@page "/login"
@using System.ComponentModel.DataAnnotations
@using System.Text.Json

@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@rendermode InteractiveServer

<center>
    <h3>Log In</h3>
    <div style="justify-content:center;text-align:left;width:45%;">
        <RadzenTemplateForm TItem="LoginViewModel" Data=@model Submit=@OnSubmit InvalidSubmit=@OnInvalidSubmit>
            @if (showError)
            {
                <RadzenAlert Variant="@Variant.Filled" AlertStyle=@AlertStyle.Primary Size=@AlertSize.Small Shade="Shade.Lighter" AllowClose=false>
                    <RadzenText TagName="TagName.P">@errorMessage</RadzenText>
                </RadzenAlert>
            }
            <RadzenStack Gap="1rem" Class="rz-p-sm-12">
                <RadzenFormField Text="Email" Variant="@variant">
                    <ChildContent>
                        <RadzenTextBox Name="email" @bind-Value=@model.Email />
                    </ChildContent>
                    <Helper>
                        <RadzenRequiredValidator Component="email" Text="Email is required." />
                        <RadzenEmailValidator Component="email" Text="Email is not valid." />
                        <RadzenLengthValidator Component="email" Max="256" Text="Email can be a maximum of 256 characters" />
                    </Helper>
                </RadzenFormField>
                <RadzenFormField Text="Password" Variant="@variant">
                    <ChildContent>
                        <RadzenTextBox Name="Password" @bind-Value="@model.Password" Visible="@(!password)" />
                        <RadzenPassword Name="Password" @bind-Value="@model.Password" Visible="@password" />
                    </ChildContent>
                    <End>
                        <RadzenButton Icon="@(password ? "visibility" : "visibility_off")" Click="TogglePassword" Variant="Variant.Text" Size="ButtonSize.Small" />
                    </End>
                    <Helper>
                        <RadzenRequiredValidator Component="Password" Text="Password is required." />
                        <RadzenLengthValidator Component="Password" Min="8" Max="100" Text="Password should be between 8 and 100 characters" />
                    </Helper>
                </RadzenFormField>
                <RadzenButton ButtonType="ButtonType.Submit" Text="Log In"></RadzenButton>              
            </RadzenStack>
                   
        </RadzenTemplateForm>
         <RadzenStack Orientation="Orientation.Horizontal" Gap="10px" JustifyContent="JustifyContent.Center" AlignItems="AlignItems.Normal" Wrap="FlexWrap.NoWrap">
                <RadzenText Style="color:black;">New to Championship Master?</RadzenText>
                <RadzenLink Path="/register" Text="Create account" />
          </RadzenStack>
    </div>
</center>

@code {

    Variant variant = Variant.Outlined;


    private LoginViewModel model = new LoginViewModel();
    private string? errorMessage;
    private bool showError = false;

    bool password = true;

    async Task OnSubmit(LoginViewModel login)
    {
        var request = await httpClient.PostAsJsonAsync("api/Player/login", login);

        if (!request.IsSuccessStatusCode)
        {
            var responseBody = await request.Content.ReadAsStringAsync();
            errorMessage = responseBody;
            showError = true;
            return;
        }



        var successfulLogin = await request.Content.ReadAsStringAsync();
        var token = JsonSerializer.Deserialize<Dictionary<string, string>>(successfulLogin)!["jwtToken"];
        await localStorage.SetItemAsStringAsync("token", token);

        NavigationManager.NavigateTo("/");
    }

    void OnInvalidSubmit(FormInvalidSubmitEventArgs args)
    {
        showError = false;
    }
    void TogglePassword()
    {
        password = !password;
    }
}
