@inject ITokenService tokenService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory httpClient
@inject IConfiguration configuration
@inject ProtectedLocalStorage _localStorage

@rendermode InteractiveServer


<div style="top:0px;left:0px;margin-bottom: 0px;position:sticky;z-index:1;box-shadow: 0 0 10px 0 rgba(0,0,0,0.5);">
    <RadzenMenu Click="OnParentClicked">
        <RadzenMenuItem Text="Home" Icon="home" Path="home" Visible=@isLogged></RadzenMenuItem>
        <RadzenMenuItem Text="Championships" Icon="emoji_events" Path="championshipsmain" Visible=@isLogged></RadzenMenuItem>
        <RadzenMenuItem Text="Teams" Path="manageteams" Icon="groups" Visible=@isLogged></RadzenMenuItem>
        <RadzenMenuItem Text="Games" Path="managegames" Icon="sports_soccer" Visible=@isLogged></RadzenMenuItem>       
        <RadzenMenuItem Icon="help_outline" Visible=@isLogged Text="Info" Path="info"></RadzenMenuItem>
        <RadzenMenuItem Icon="admin_panel_settings" Text="Admin Panel" Visible=@isAdmin Path="admin"></RadzenMenuItem>
        <RadzenProfileMenu Visible=@isLogged>
            <Template>
                <RadzenImage Path="@imagePath" AlternateText="Profile picture" Visible=@isLogged Style="margin-right: 10px; width: 32px;" />
                <span class="rz-navigation-item-text" style="flex:none;">@username</span>
            </Template>
            <ChildContent>
                <RadzenMenuItem Icon="account_circle" Visible=@isLogged Text="Manage profile" Path="profile"></RadzenMenuItem>
                <RadzenMenuItem Icon="lock" Visible=@isLogged Text="Change password" Path="changePassword"></RadzenMenuItem>
                <RadzenMenuItem Icon="exit_to_app" Visible=@isLogged Text="Log Out" Click="()=> LogOut(username)"></RadzenMenuItem>
            </ChildContent>
        </RadzenProfileMenu>
    </RadzenMenu>
</div>



@code {
    bool isAdmin = false;
    bool isLogged = false;
    string imagePath = "";
    bool imageLoaded = false;

    string username = "";

    string base64EncodedImageData = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            var tokenString = await tokenService.GetToken();
            if (tokenString != null)
            {
                var token = new JwtSecurityTokenHandler().ReadJwtToken(tokenString);

                if (await tokenService.ValidateToken())
                {
                    isAdmin = tokenService.ValidateTokenAdmin(token);
                    username = token.Claims.FirstOrDefault(x => x.Type == "unique_name")?.Value ?? "";
                    isLogged = true;
                    try
                    {
                        var imageResult = await _localStorage.GetAsync<string>("playerAvatar");
                        if (imageResult.Success && !string.IsNullOrEmpty(imageResult.Value))
                        {
                            base64EncodedImageData = imageResult.Value!;
                            imagePath = $"data:image/jpeg;base64,{base64EncodedImageData}";
                        }
                        else
                        {
                            imagePath = "images/defaultAvatar.png";
                        }

                    }
                    catch (Exception ex)
                    {

                    }

                    StateHasChanged();
                }

            }
        }
    }
    void OnParentClicked()
    {

    }
    private async Task LogOut(string username)
    {

        HttpContent httpContent = new StringContent(username, System.Text.Encoding.UTF8, "text/plain");
        var tokenString = await tokenService.GetToken();

        using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {tokenString}");
        await client.GetAsync($"api/Player/logout/{username}");

        await _localStorage.DeleteAsync("jwtToken");

        isLogged = false;
        isAdmin = false;
        StateHasChanged();

        NavigationManager.NavigateTo("/login");


    }
}