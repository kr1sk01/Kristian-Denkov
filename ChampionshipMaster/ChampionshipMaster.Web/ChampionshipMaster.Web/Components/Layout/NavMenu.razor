@inject ITokenService tokenService
@inject NavigationManager NavigationManager
@inject IHttpClientFactory httpClient
@inject IConfiguration configuration
@inject ProtectedLocalStorage _localStorage

@rendermode InteractiveServer


<div style="top:0px;left:0px;margin-bottom: 0px;">
    <RadzenMenu Click="OnParentClicked">
        <RadzenMenuItem Text="Home" Icon="home" Path="">
        </RadzenMenuItem>
        <RadzenMenuItem Text="Championships" Icon="assignment" Path="championshipsmain">
        </RadzenMenuItem>
        <RadzenMenuItem Text="Inputs" Icon="payment" Disabled="true">
            <RadzenMenuItem Text="CheckBox" Path="checkbox" Icon="check_circle"></RadzenMenuItem>
            <RadzenMenuItem Text="TextBox" Path="textbox" Icon="input"></RadzenMenuItem>
            <RadzenMenuItem Text="TextArea" Path="textarea" Icon="description"></RadzenMenuItem>
            <RadzenMenuItem Text="Password" Path="password" Icon="payment"></RadzenMenuItem>
            <RadzenMenuItem Text="Numeric" Path="numeric" Icon="aspect_ratio"></RadzenMenuItem>
            <RadzenMenuItem Text="DatePicker" Path="datepicker" Icon="date_range"></RadzenMenuItem>
        </RadzenMenuItem>
        <RadzenMenuItem Text="Data" Icon="save">
            <RadzenMenuItem Text="DataGrid" Path="datagrid" Icon="grid_on"></RadzenMenuItem>
            <RadzenMenuItem Text="DataList" Path="datalist" Icon="list"></RadzenMenuItem>
            <RadzenMenuItem Text="DropDown" Path="dropdown" Icon="dns"></RadzenMenuItem>
            <RadzenMenuItem Text="DropDownDataGrid" Path="dropdown-datagrid" Icon="receipt"></RadzenMenuItem>
            <RadzenMenuItem Text="ListBox" Path="listbox" Icon="view_list"></RadzenMenuItem>
            <RadzenMenuItem Text="TemplateForm" Path="templateform" Icon="line_style"></RadzenMenuItem>
        </RadzenMenuItem>
        <RadzenMenuItem Text="Containers" Icon="account_box">
            <RadzenMenuItem Text="Tabs" Path="tabs" Icon="tab"></RadzenMenuItem>
            <RadzenMenuItem Text="Panel" Path="panel" Icon="content_paste"></RadzenMenuItem>
            <RadzenMenuItem Text="Fieldset" Path="fieldset" Icon="account_balance_wallet"></RadzenMenuItem>
            <RadzenMenuItem Text="Card" Path="card" Icon="line_style"></RadzenMenuItem>
        </RadzenMenuItem>
        <RadzenMenuItem Text="More">
            <RadzenMenuItem Text="Item1"></RadzenMenuItem>
            <RadzenMenuItem Text="Item2"></RadzenMenuItem>
            <RadzenMenuItem Text="More items">
                <RadzenMenuItem Text="More sub items">
                    <RadzenMenuItem Text="Item1"></RadzenMenuItem>
                    <RadzenMenuItem Text="Item2"></RadzenMenuItem>
                </RadzenMenuItem>
            </RadzenMenuItem>
        </RadzenMenuItem>
        <RadzenMenuItem Icon="account_box" Text="Profile" Path="profile">
        </RadzenMenuItem>
        <RadzenMenuItem Icon="exit_to_app" Visible=@isLogged Text="Log Out" Click="()=> LogOut(username)">
        </RadzenMenuItem>
        <RadzenMenuItem Icon="build" Text="Admin Panel" Visible=@isAdmin Path="admin"></RadzenMenuItem>
    </RadzenMenu>
</div>



@code {
    bool isAdmin = false;
    [Parameter] public bool isLogged { get; set; }
    string username = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var tokenString = await tokenService.GetToken();
            if (tokenString != null)
            {
                var token = new JwtSecurityTokenHandler().ReadJwtToken(tokenString);
                username = token.Claims.FirstOrDefault(x => x.Type == "unique_name")?.Value ?? "";
                isLogged = true;
                StateHasChanged();
            }
            else
            {
                isLogged = false;
                StateHasChanged();
            }

            if (await tokenService.ValidateToken(true))
            {
                isAdmin = true;
                StateHasChanged();
            }
            else
            {
                isAdmin = false;
            }
        }
    }
    void OnParentClicked()
    {

    }
    private async Task LogOut(string username)
    {

        HttpContent httpContent = new StringContent(username, System.Text.Encoding.UTF8, "text/plain");
        var tokenString = await tokenService.GetToken();

        using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {tokenString}");
        await client.GetAsync($"api/Player/logout/{username}");

        await _localStorage.DeleteAsync("jwtToken");

        isLogged = false;
        StateHasChanged();

        NavigationManager.NavigateTo("/login");


    }
}