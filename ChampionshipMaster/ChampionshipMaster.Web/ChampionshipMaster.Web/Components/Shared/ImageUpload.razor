@inject ITokenService tokenService
@inject INotifier notifier
@inject IImageService imageService
@inject IHttpClientFactory httpClient
@inject IConfiguration configuration
@inject NavigationManager NavigationManager
@inject ProtectedLocalStorage _localStorage

@rendermode InteractiveServer

<div class="col-md-6 p-3">
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H1">@Title</RadzenText>
        <RadzenImage Path="@imagePath" AlternateText="Displayed Image" Style="margin: 16px; max-width: 256px;"></RadzenImage>
        <RadzenStack Orientation="Orientation.Vertical" Gap="1rem">
            <RadzenUpload Icon="upload" @ref="upload" Accept=".png,.jpeg,.jpg" Auto="false" Multiple="false" Change=@(args => OnChange(args)) InputAttributes="@(new Dictionary<string,object>(){ { "aria-label", "select file" }})"
                          Progress=@(args => OnProgress(args)) class="w-100" />
            <RadzenImage Path="@newImagePath" Visible="@(!string.IsNullOrEmpty(newImagePath))" AlternateText="New Image" Style="max-width: 64px; max-height: 64px; align-self: center"></RadzenImage>
        </RadzenStack>
        <RadzenButton Text="Save" Click=@UploadImage class="d-block mt-4" Disabled="@disableSaveButton" />
    </RadzenCard>
</div>

@code {
    [Parameter]
    public required string Title { get; set; }
    [Parameter]
    public string? ToLocalStorage { get; set; }
    [Parameter]
    public SetImageForOptions SetImageFor { get; set; }
    [Parameter]
    public required string RequestUrl { get; set; }
    [Parameter]
    public bool ReloadPageOnComplete { get; set; } = false;

    public enum SetImageForOptions
    {
        Avatar,
        Team,
        Championship
    }

    const long FileSizeLimit = 40 * 1024;
    bool disableSaveButton = true;
    string imagePath = string.Empty;
    string newImagePath = string.Empty;

    Radzen.FileInfo? uploadedImage = null;
    RadzenUpload upload = default!;

    public void UpdateDisplayedImagePath(string? DisplayedImageEncodedData)
    {
        if (!string.IsNullOrEmpty(DisplayedImageEncodedData))
        {
            var imageType = imageService.GetImageFileType(DisplayedImageEncodedData);
            imagePath = $"data:image/{imageType};base64,{DisplayedImageEncodedData}";
        }
        else
        {
            if (SetImageFor == SetImageForOptions.Avatar) { imagePath = "images/defaultAvatar.png"; }
            else if (SetImageFor == SetImageForOptions.Team) { imagePath = "images/defaultTeam.png"; }
            else if (SetImageFor == SetImageForOptions.Championship) { imagePath = "images/defaultChampionship.png"; }
            else { imagePath = "images/defaultLogo.png"; }
        }

        StateHasChanged();
    }

    async Task OnProgress(UploadProgressArgs args)
    {
    }

    async Task OnChange(UploadChangeEventArgs args)
    {
        if (!args.Files.Any())
        {
            disableSaveButton = true;
            newImagePath = string.Empty;
            StateHasChanged();
            return;
        }

        if (args.Files.First().Size > FileSizeLimit)
        {
            notifier.SendErrorNotification($"The image you selected exceeds the size limit of {FileSizeLimit / 1024}KB", 5);
            await upload.ClearFiles();
            disableSaveButton = true;
            newImagePath = string.Empty;
            StateHasChanged();
            return;
        }

        uploadedImage = args.Files.First();
        var newImage = await imageService.ConvertToBase64String(uploadedImage);
        newImagePath = $"data:{uploadedImage.ContentType};base64,{newImage}";
        disableSaveButton = false;
        StateHasChanged();
    }

    async Task UploadImage()
    {
        if (!await tokenService.ValidateToken())
        {
            notifier.SendInformationalNotification("You're not logged in or your session has expired");
            NavigationManager.NavigateTo("/login");
        }

        var token = await tokenService.GetToken();
        using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");
        var imageBase64 = await imageService.ConvertToBase64String(uploadedImage!);
        Dictionary<string, string> content = new Dictionary<string, string>
                {
                    { "newImage", imageBase64 }
                };

        var response = await client.PostAsJsonAsync(RequestUrl, content);

        if (response.IsSuccessStatusCode)
        {
            try
            {
                if (ToLocalStorage != null)
                {
                    await _localStorage.SetAsync(ToLocalStorage, imageBase64);
                    var body = await response.Content.ReadAsStringAsync();
                    notifier.SendSuccessNotification(body);
                    imagePath = $"data:image/{uploadedImage!.ContentType};base64,{imageBase64}";
                    newImagePath = string.Empty;
                    disableSaveButton = true;
                    await upload.ClearFiles();
                    StateHasChanged();
                }
                else
                {
                    var body = await response.Content.ReadAsStringAsync();
                    notifier.SendSuccessNotification(body);
                }

                if (ReloadPageOnComplete) { NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); }
            }
            catch
            {
                notifier.SendErrorNotification("Something went wrong!");
            }
        }
        else
        {
            var body = await response.Content.ReadAsStringAsync();
            notifier.SendErrorNotification(body);
        }
    }
}
