@inject ITokenService tokenService
@inject IHttpClientFactory httpClient
@inject IWebHostEnvironment Environment
@inject IConfiguration configuration
@inject INotifier notifier

@inject ProtectedLocalStorage _localStorage
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<div class="col-md-6 col-lg-4 p-3">
    <RadzenCard>
        <RadzenText TextStyle="TextStyle.Subtitle2" TagName="TagName.H1">@Title</RadzenText>
        <RadzenStack Orientation="Orientation.Horizontal">
            <RadzenTextBox @ref="@textBox" Value="@currentValue" @oninput=@(args => OnChange(args.Value?.ToString())) class="w-100" />
            <RadzenButton Disabled="@(!usernameHasChanged)" Click="OnClick">Save</RadzenButton>
        </RadzenStack>
    </RadzenCard>
</div>

@code {
    [Parameter]
    public required string Title { get; set; }
    [Parameter]
    public string? InitialValue { get; set; }
    [Parameter]
    public required string RequestUrl { get; set; }
    [Parameter]
    public required string ResponseProperty { get; set; }
    [Parameter]
    public string? ToLocalStorage { get; set; }
    [Parameter]
    public bool ReloadPageOnComplete { get; set; } = false;

    RadzenTextBox textBox = default!;
    string? currentValue = "";
    bool usernameHasChanged = false;

    public void SetInitialValue(string initialValue)
    {
        InitialValue = initialValue;
        currentValue = initialValue;
        StateHasChanged();
    }

    public void OnChange(string? value)
    {
        if (!string.IsNullOrEmpty(value) && value != InitialValue)
        {
            usernameHasChanged = true;
            currentValue = value;
            StateHasChanged();
        }
        else
        {
            usernameHasChanged = false;
            currentValue = value;
            StateHasChanged();
        }
    }

    public async Task OnClick()
    {
        if (!await tokenService.ValidateToken())
        {
            notifier.SendInformationalNotification("You're not logged in or your session has expired");
            NavigationManager.NavigateTo("/login");
        }

        var token = await tokenService.GetToken();
        using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

        var newName = textBox.Value;
        Dictionary<string, string> content = new Dictionary<string, string>
                 {
                     { "newName", newName }
                 };

        var request = await client.PostAsJsonAsync(RequestUrl, content);
        var body = await request.Content.ReadAsStringAsync();

        if (request.IsSuccessStatusCode)
        {
            try
            {
                var responseValue = JsonSerializer.Deserialize<Dictionary<string, string>>(body)![ResponseProperty];

                if (!string.IsNullOrEmpty(ToLocalStorage))
                {
                    await _localStorage.SetAsync(ToLocalStorage, responseValue);
                }

                if (ReloadPageOnComplete) { NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true); }
            }
            catch (Exception ex)
            {
                notifier.SendErrorNotification("Something went wrong!");
                Console.WriteLine(ex.Message);
            }
        }
        else
        {
            notifier.SendErrorNotification(body);
        }

        // var token = await tokenService.GetToken();
        // if (token == null)
        // {
        //     NavigationManager.NavigateTo("/login");
        // }
        // else
        // {
        //     using HttpClient client = httpClient.CreateClient(configuration["ClientName"]!);
        //     client.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");
        //     var newUsername = textBox.Value;
        //     Dictionary<string, string> content = new Dictionary<string, string>
        //         {
        //             { "newUsername", newUsername }
        //         };
        //     var request = await client.PostAsJsonAsync("api/Player/changeUsername", content);
        //     var body = await request.Content.ReadAsStringAsync();

        //     if (request.IsSuccessStatusCode)
        //     {
        //         var tokenString = JsonSerializer.Deserialize<Dictionary<string, string>>(body)!["jwtToken"];
        //         await _localStorage.SetAsync("jwtToken", tokenString);
        //         NavigationManager.NavigateTo("/profile", forceLoad: true);
        //     }
        //     else
        //     {
        //         notifier.SendErrorNotification(body, 5);
        //     }
        // }

    }
}
